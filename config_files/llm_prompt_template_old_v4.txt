You are given a task for a robot to perform in a kitchen environment.

Task: {task_instruction}

Your job is to break down this task into a sequence of subtasks that the robot can perform. Each subtask
should be described in natural language and should include a corresponding PDDL goal expression using valid
PDDL syntax.

You are also provided with the following domain information to help you generate valid subtasks.

-------------------------------
Provided Domain Information:
-------------------------------

Available Predicates:
{predicates_content}

Available Actions:
{actions_content}

Objects by Type:
{objects_content}

Initial State:
{init_state_content}



Your output should meet the following requirements:

1. Generate a sequence of subtasks that together accomplish the overall task: {task_instruction}

2. Each subtask should be centered around a single object or tightly related object group (e.g., chicken,
potato, or pot). And each subtask must involve a meaningful group of actions, not a single atomic step. Avoid
splitting simple operations (like "move to fridge" or "open door") into separate subtasks. Instead,
group them into a single subtask that completes a full object interaction, such as retrieving an
item and placing it where it will be used.

3. For each subtask, provide:
   - A concise natural language instruction in one sentence describing what the robot must do.
   - A valid PDDL goal expression that represents the desired world state after completing that subtask.

4. All PDDL goal expressions must follow correct Lisp-style syntax.
   - For multiple goals, use compound PDDL syntax such as: (and (predicate1 ...) (predicate2 ...))
   - Do NOT use natural language terms like AND, OR, or NOT in the PDDL goals.

5. Important Clarification: The PDDL goal for each subtask must capture the final goal states/predicates that result after the completion of that subtask. 
This means you should explicitly encode what has changed in the world regarding the relevant objects, their locations, or the robotâ€™s state after finishing that subtask. 
Do not list intermediate steps. Only the outcome state.

-------------------------------
Output Format (strictly follow this):
-------------------------------

Subtask 1: [Natural language subtask]
PDDL Goal 1: [Valid PDDL goal]

Subtask 2: [Natural language subtask]
PDDL Goal 2: [Valid PDDL goal]

...

Subtask N: [Natural language subtask]
PDDL Goal N: [Valid PDDL goal]

--------------------------------------------------------------
Example-1 for a cooking task ("Prepare a dish by cooking chicken")
--------------------------------------------------------------

Subtask 1: Move to the opened fridge, retrieve the chicken, then move to the countertcabop_2 and put the chicken in pot.
PDDL Goal 1: (and (at_robot pr2 countertop_2) (in_cookware chicken pot))

Subtask 2: Move to the opened cabinet, take the oil, then move to the countertcabop_2 and pour the oil in pot.
PDDL Goal 2: (and (at_robot pr2 countertcabop_2) (in_cookware oil pot))

Subtask 3: Move to the stove with the pot, Place the pot to the stovetop and turn on the stove.
PDDL Goal 3: (and (at_robot pr2 stove) (on_stovetop pot stove) (turned_on stove))

Subtask 4: Wait for the chicken to cook and then turn off the stove.
PDDL Goal 4: (and (at_robot pr2 stove) (cooked chicken) (turned_off stove))


-------------------------------
What NOT to do (Negative Example)
-------------------------------
A) Too granular / intermediate-only goal:
Subtask: Move to the fridge.
Bad PDDL Goal: (at_robot pr2 fridge)
Why wrong: This encodes only an intermediate waypoint, not a meaningful object interaction or outcome state.

B) Contradictory final state:
Subtask: Retrieve the chicken from fridge and place it into the pot on countertop_2.
Bad PDDL Goal: (and (at_robot pr2 fridge) (at_robot pr2 countertop_2) (in_cookware chicken pot))
Why wrong: The goal contains mutually exclusive predicates, pr2 cannot be at both fridge and countertop_2 simultaneously. 
Goals must represent a single, consistent final state, not a history of where the robot has been.

-------------------------------
Important Notes:
-------------------------------
- Ensure the subtasks follow a logical and feasible sequence to complete the given task: {task_instruction}
- Be precise and consistent in naming objects and locations.
- Always double-check that compound PDDL goals are wrapped properly in (and ...).
- Encode only the final post-subtask world state; avoid path/history facts and any conflicting predicates 
   (e.g., door_open and door_closed on the same container, or multiple at_robot locations).


